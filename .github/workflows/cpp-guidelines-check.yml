name: C++ Code Guidelines Check

on:
  pull_request:
    paths:
      - '**/*.cpp'
      - '**/*.cc'
      - '**/*.cxx'
      - '**/*.c'
      - '**/*.hpp'
      - '**/*.h'
      - '**/*.hxx'

jobs:
  cpp-guidelines-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch full history for comparison
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Add any additional dependencies if needed
    
    - name: Get changed C++ files
      id: changed-files
      run: |
        # Get list of changed C++ files
        CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '\.(cpp|cc|cxx|c|hpp|h|hxx)$' | tr '\n' ' ')
        echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "Changed C++ files: $CHANGED_FILES"
    
    - name: Run C++ Guidelines Analyzer
      id: analysis
      if: steps.changed-files.outputs.files != ''
      run: |
        python3 cpp_code_analyzer.py --format json --output analysis_result.json ${{ steps.changed-files.outputs.files }}
        python3 cpp_code_analyzer.py --format text --output analysis_report.txt ${{ steps.changed-files.outputs.files }}
        
        # Set outputs for later steps
        ERRORS=$(python3 -c "import json; data=json.load(open('analysis_result.json')); print(data['summary']['errors'])")
        WARNINGS=$(python3 -c "import json; data=json.load(open('analysis_result.json')); print(data['summary']['warnings'])")
        TOTAL=$(python3 -c "import json; data=json.load(open('analysis_result.json')); print(data['summary']['total_violations'])")
        
        echo "errors=$ERRORS" >> $GITHUB_OUTPUT
        echo "warnings=$WARNINGS" >> $GITHUB_OUTPUT
        echo "total=$TOTAL" >> $GITHUB_OUTPUT
    
    - name: Upload analysis results
      if: steps.changed-files.outputs.files != ''
      uses: actions/upload-artifact@v4
      with:
        name: cpp-analysis-results
        path: |
          analysis_result.json
          analysis_report.txt
    
    - name: Find existing comment
      if: steps.changed-files.outputs.files != ''
      uses: actions/github-script@v6
      id: find-comment
      with:
        script: |
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('üìã C++ Code Guidelines Analysis Results')
          );
          
          return botComment ? botComment.id : null;
    
    - name: Update or create PR comment
      if: steps.changed-files.outputs.files != ''
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read the analysis results
          const analysisData = JSON.parse(fs.readFileSync('analysis_result.json', 'utf8'));
          const reportText = fs.readFileSync('analysis_report.txt', 'utf8');
          
          // Create comment body
          let commentBody = `## üìã C++ Code Guidelines Analysis Results\n\n`;
          commentBody += `*Last updated: ${new Date().toISOString()}*\n\n`;
          
          // Add summary
          const summary = analysisData.summary;
          commentBody += `### Summary\n`;
          commentBody += `- üî¥ **Errors**: ${summary.errors}\n`;
          commentBody += `- üü° **Warnings**: ${summary.warnings}\n`;
          commentBody += `- üîµ **Info**: ${summary.info}\n`;
          commentBody += `- **Total**: ${summary.total_violations} violations\n\n`;
          
          if (summary.total_violations === 0) {
            commentBody += `‚úÖ **Great job!** No guideline violations found.\n`;
          } else {
            // Add status indicator
            if (summary.errors > 0) {
              commentBody += `‚ùå **Status**: BLOCKING - This PR cannot be merged due to errors\n\n`;
            } else if (summary.warnings > 0) {
              commentBody += `‚ö†Ô∏è **Status**: REVIEW REQUIRED - This PR has warnings that should be addressed\n\n`;
            }
            
            commentBody += `<details>\n<summary>üìù Detailed Report (click to expand)</summary>\n\n`;
            commentBody += `\`\`\`\n${reportText}\n\`\`\`\n\n</details>\n`;
            
            // Add quick fixes section
            commentBody += `\n### üí° Quick Fixes\n`;
            commentBody += `Some common issues and their fixes:\n`;
            commentBody += `- **Naming**: Use PascalCase for classes/functions, camelCase for variables, m_ prefix for members\n`;
            commentBody += `- **Headers**: Add include guards (#pragma once) and avoid 'using namespace std'\n`;
            commentBody += `- **Modern C++**: Use smart pointers instead of raw pointers, prefer nullptr over NULL\n`;
            commentBody += `- **Comments**: Add Doxygen-style comments for public functions in headers\n`;
          }
          
          // Update existing comment or create new one
          const existingCommentId = ${{ steps.find-comment.outputs.result }};
          
          if (existingCommentId) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingCommentId,
              body: commentBody
            });
            console.log('Updated existing comment');
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
                         console.log('Created new comment');
           }
    

    - name: Set status based on violations
      if: steps.changed-files.outputs.files != ''
      run: |
        ERRORS=${{ steps.analysis.outputs.errors }}
        WARNINGS=${{ steps.analysis.outputs.warnings }}
        TOTAL=${{ steps.analysis.outputs.total }}
        
        echo "Analysis Results:"
        echo "- Errors: $ERRORS"
        echo "- Warnings: $WARNINGS"
        echo "- Total violations: $TOTAL"
        
        if [ "$ERRORS" -gt 0 ]; then
          echo "‚ùå BLOCKING: Found $ERRORS error(s) in C++ code guidelines"
          echo "This PR cannot be merged until all errors are fixed."
          exit 1
        elif [ "$WARNINGS" -gt 0 ]; then
          echo "‚ö†Ô∏è REVIEW REQUIRED: Found $WARNINGS warning(s) in C++ code guidelines"
          echo "Please review and address these warnings before merging."
          exit 1
        else
          echo "‚úÖ C++ code guidelines check passed - no violations found"
        fi
    
    - name: Handle no C++ files changed
      if: steps.changed-files.outputs.files == ''
      run: |
        echo "‚ÑπÔ∏è No C++ files were changed in this PR - skipping guidelines check" 

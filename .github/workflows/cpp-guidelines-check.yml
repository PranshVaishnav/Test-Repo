name: C++ Code Guidelines Check

on:
  pull_request:
    paths:
      - '**/*.cpp'
      - '**/*.cc'
      - '**/*.cxx'
      - '**/*.c'
      - '**/*.hpp'
      - '**/*.h'
      - '**/*.hxx'

jobs:
  cpp-guidelines-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch full history for comparison
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Add any additional dependencies if needed
    
    - name: Get changed C++ files
      id: changed-files
      run: |
        # Get list of changed C++ files
        CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '\.(cpp|cc|cxx|c|hpp|h|hxx)$' | tr '\n' ' ')
        echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "Changed C++ files: $CHANGED_FILES"
    
    - name: Run C++ Guidelines Analyzer
      if: steps.changed-files.outputs.files != ''
      run: |
        python3 cpp_code_analyzer.py --format json --output analysis_result.json ${{ steps.changed-files.outputs.files }}
    
    - name: Generate Summary Report
      if: steps.changed-files.outputs.files != ''
      run: |
        python3 cpp_code_analyzer.py --format text --output analysis_report.txt ${{ steps.changed-files.outputs.files }}
        
        # Create a summary for the PR comment
        cat > pr_comment.md << 'EOF'
        ## üìã C++ Code Guidelines Analysis
        
        EOF
        
        # Add analysis results to comment
        cat analysis_report.txt >> pr_comment.md
    
    - name: Upload analysis results
      if: steps.changed-files.outputs.files != ''
      uses: actions/upload-artifact@v4
      with:
        name: cpp-analysis-results
        path: |
          analysis_result.json
          analysis_report.txt
    
    - name: Comment on PR
      if: steps.changed-files.outputs.files != ''
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read the analysis results
          const analysisData = JSON.parse(fs.readFileSync('analysis_result.json', 'utf8'));
          const reportText = fs.readFileSync('analysis_report.txt', 'utf8');
          
          // Create comment body
          let commentBody = `## üìã C++ Code Guidelines Analysis Results\n\n`;
          
          // Add summary
          const summary = analysisData.summary;
          commentBody += `### Summary\n`;
          commentBody += `- üî¥ **Errors**: ${summary.errors}\n`;
          commentBody += `- üü° **Warnings**: ${summary.warnings}\n`;
          commentBody += `- üîµ **Info**: ${summary.info}\n`;
          commentBody += `- **Total**: ${summary.total_violations} violations\n\n`;
          
          if (summary.total_violations === 0) {
            commentBody += `‚úÖ **Great job!** No guideline violations found.\n`;
          } else {
            commentBody += `<details>\n<summary>üìù Detailed Report (click to expand)</summary>\n\n`;
            commentBody += `\`\`\`\n${reportText}\n\`\`\`\n\n</details>\n`;
            
            // Add quick fixes section
            commentBody += `\n### üí° Quick Fixes\n`;
            commentBody += `Some common issues and their fixes:\n`;
            commentBody += `- **Naming**: Use PascalCase for classes/functions, camelCase for variables, m_ prefix for members\n`;
            commentBody += `- **Headers**: Add include guards (#pragma once) and avoid 'using namespace std'\n`;
            commentBody += `- **Modern C++**: Use smart pointers instead of raw pointers, prefer nullptr over NULL\n`;
            commentBody += `- **Comments**: Add Doxygen-style comments for public functions in headers\n`;
          }
          
          // Post comment
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });
    
    - name: Set status based on errors
      if: steps.changed-files.outputs.files != ''
      run: |
        # Read JSON results and check for errors
        ERRORS=$(python3 -c "import json; data=json.load(open('analysis_result.json')); print(data['summary']['errors'])")
        
        if [ "$ERRORS" -gt 0 ]; then
          echo "‚ùå Found $ERRORS error(s) in C++ code guidelines"
          exit 1
        else
          echo "‚úÖ C++ code guidelines check passed"
        fi
